@model CheckoutConfirmationVM

@{
    Layout = "_Layout";
    ViewData["Title"] = "Checkout Confirmation";
}
@Html.AntiForgeryToken()
<div class="container py-4">
    <h2 class="text-center mb-4 fw-bold text-primary">🎟️ Checkout Confirmation</h2>

    <div class="row g-4">
        <!-- Movie Details -->
        <div class="col-lg-4 text-center">
            <div class="card shadow-sm rounded-4 p-4">
                <img src="@Model.PosterUrl" alt="@Model.MovieTitle Poster" class="img-fluid rounded-4 mb-3">
                <h4 class="fw-bold text-primary">@Model.MovieTitle</h4>
                <p class="text-muted">@Model.Genre | @Model.Duration mins</p>
            </div>
        </div>

        <!-- ShowTime , Seat and User Details -->
        <div class="col-lg-8">
            <div class="card shadow-sm rounded-4 p-4">
                <h5 class="fw-bold text-primary">🎟️ Booking Details</h5>
                <p><strong>Theatre:</strong> @Model.TheatreName</p>
                <p><strong>Hall:</strong> @Model.HallName</p>
                <p><strong>Date:</strong> @Model.ShowDate</p>
                <p><strong>Time:</strong> @Model.ShowTime</p>
                <p><strong>Selected Seats:</strong> @string.Join(", ", Model.SelectedSeatNumbers)</p>
                <p class="fw-bold text-success"><strong>Total Price:</strong> $@Model.TotalPrice</p>
            </div>


            <div class="card shadow-sm rounded-4 p-4 mt-4">
                <h5 class="fw-bold text-primary">👤 User Information</h5>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Name:</strong> @Model.FirstName @Model.LastName</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Email:</strong> @Model.UserEmail</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Phone Number:</strong> @Model.PhoneNumber</p>
                    </div>
                </div>
            </div>

        </div>
    </div>

@*     <!-- Action Buttons -->
    <div class="text-center mt-5">
        <form asp-controller="Reservation" asp-action="FinalizeBooking" method="post" class="d-inline-block">
            @Html.AntiForgeryToken()
            <input type="hidden" name="ShowTimeId" value="@Model.ShowTimeId" />
            <input type="hidden" name="selectedSeatIds" value="@string.Join(",", Model.SelectedSeatNumbers)" />
            <input type="hidden" name="TotalPrice" value="@Model.TotalPrice" />
            <button type="submit" id="proceedButton" class="btn btn-lg btn-success px-5">Proceed to Payment 💳</button>
        </form>
        <a href="/" class="btn btn-lg btn-secondary px-5 ms-3">Cancel ❌</a>
    </div> *@


    <!-- Action Buttons -->
    <div class="text-center mt-5">
        <button id="proceedButton" class="btn btn-lg btn-success px-5">Proceed to Payment 💳</button>
        <a href="/" class="btn btn-lg btn-secondary px-5 ms-3">Cancel ❌</a>
    </div>



</div>



<div class="sticky-timer">
    <p>
        You have <span id="countdown-timer">5:00</span> minutes to complete your reservation.
    </p>
</div>

@section Scripts {
    <script>
        // ReservedAt from the backend
        const reservedAt = new Date('@Model.ReservedAt.ToString("yyyy-MM-ddTHH:mm:ss")');
        const countdownTimer = document.getElementById('countdown-timer');
        const expirationTime = new Date(reservedAt.getTime() + 5 * 60000); // Add 5 minutes to reservedAt

        function updateCountdown() {
            const now = new Date();
            const remaining = expirationTime - now;

            if (remaining <= 0) {
                countdownTimer.textContent = "Time expired!";
                document.getElementById("proceedButton").disabled = true;
                clearInterval(timerInterval);
                //alert("Your reservation has expired. Please try again.");
                return;
            }

            const minutes = Math.floor(remaining / 60000);
            const seconds = Math.floor((remaining % 60000) / 1000);
            countdownTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        const timerInterval = setInterval(updateCountdown, 1000);

        //
        document.getElementById("proceedButton").addEventListener("click", function () {
            const showTimeId = @Model.ShowTimeId;
            const selectedSeatIds = @Html.Raw(Json.Serialize(Model.SelectedSeatIds ?? new List<int>()));

            // Sending data to the server using Fetch API
            fetch('/Reservation/FinalizeBooking', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    showTimeId: showTimeId,
                    selectedSeatIds: selectedSeatIds
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to process payment.');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    window.location.href = data.redirectUrl; // Redirect to payment page
                } else {
                    alert(data.message || "Something went wrong. Try again.");
                }
            })
            .catch(error => {
                console.error("Error during payment initialization:", error);
                alert("An error occurred. Please try again.");
            });
        });


    </script>
}
